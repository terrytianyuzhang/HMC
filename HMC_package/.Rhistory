}
for(i in 1:(sample_size - 1)){
for(j in (i+1):sample_size){
summation_vector <- (j:(sample_size-1))^(-2)
A[i, j] <- sum(summation_vector) - 1/(j-1)
A[j, i] <- A[i, j]
}
}
Y <- matrix(trajectory, ncol = 1)
t(Y) %*% A  %*% Y
T_n
work_directory <- '/Users/tianyuzhang/Documents/AdaptiveSieveSGD/code_paper/review_code/'
all_result <- data.frame()
sample_size <- 10
trajectory <- rnorm(sample_size, 0, 1)
simple_mean_rolling_error <- oracle_rolling_error <- 0
for(sample_index in 2:(sample_size)){
simple_mean <- mean(trajectory[1:(sample_index-1)])
simple_mean_rolling_error <- simple_mean_rolling_error + (simple_mean - trajectory[sample_index])^2
oracle_rolling_error <- oracle_rolling_error +  (0 - trajectory[sample_index])^2
}
T_n <- simple_mean_rolling_error - oracle_rolling_error
A <- matrix(0, nrow = sample_size, ncol = sample_size)
for(sample_index in 1:(sample_size - 1)){
summation_vector <- (sample_index:(sample_size-1))^(-2)
A[sample_index, sample_index] <- sum(summation_vector)
}
for(i in 1:(sample_size - 1)){
for(j in (i+1):sample_size){
summation_vector <- (j:(sample_size-1))^(-2)
A[i, j] <- sum(summation_vector) - 1/(j-1)
A[j, i] <- A[i, j]
}
}
Y <- matrix(trajectory, ncol = 1)
t(Y) %*% A  %*% Y
T_n
A
sample_size <- 3
trajectory <- rnorm(sample_size, 0, 1)
simple_mean_rolling_error <- oracle_rolling_error <- 0
for(sample_index in 2:(sample_size)){
simple_mean <- mean(trajectory[1:(sample_index-1)])
simple_mean_rolling_error <- simple_mean_rolling_error + (simple_mean - trajectory[sample_index])^2
oracle_rolling_error <- oracle_rolling_error +  (0 - trajectory[sample_index])^2
}
T_n <- simple_mean_rolling_error - oracle_rolling_error
A <- matrix(0, nrow = sample_size, ncol = sample_size)
for(sample_index in 1:(sample_size - 1)){
summation_vector <- (sample_index:(sample_size-1))^(-2)
A[sample_index, sample_index] <- sum(summation_vector)
}
for(i in 1:(sample_size - 1)){
for(j in (i+1):sample_size){
summation_vector <- (j:(sample_size-1))^(-2)
A[i, j] <- sum(summation_vector) - 1/(j-1)
A[j, i] <- A[i, j]
}
}
Y <- matrix(trajectory, ncol = 1)
t(Y) %*% A  %*% Y
T_n
A
i <- 2
j <- 3
summation_vector <- (j:(sample_size-1))^(-2)
summation_vector
j
sample_size <- 3
trajectory <- rnorm(sample_size, 0, 1)
simple_mean_rolling_error <- oracle_rolling_error <- 0
for(sample_index in 2:(sample_size)){
simple_mean <- mean(trajectory[1:(sample_index-1)])
simple_mean_rolling_error <- simple_mean_rolling_error + (simple_mean - trajectory[sample_index])^2
oracle_rolling_error <- oracle_rolling_error +  (0 - trajectory[sample_index])^2
}
T_n <- simple_mean_rolling_error - oracle_rolling_error
A <- matrix(0, nrow = sample_size, ncol = sample_size)
for(sample_index in 1:(sample_size - 1)){
summation_vector <- (sample_index:(sample_size-1))^(-2)
A[sample_index, sample_index] <- sum(summation_vector)
}
i <- 1
j <- 3
summation_vector <- (j:(sample_size-1))^(-2)
summation_vector
for(i in 1:(sample_size - 1)){
for(j in (i+1):sample_size){
if(j <= sample_size-1){
summation_vector <- (j:(sample_size-1))^(-2)
}else{
summation_vector <- 0
}
A[i, j] <- sum(summation_vector) - 1/(j-1)
A[j, i] <- A[i, j]
}
}
work_directory <- '/Users/tianyuzhang/Documents/AdaptiveSieveSGD/code_paper/review_code/'
all_result <- data.frame()
sample_size <- 3
trajectory <- rnorm(sample_size, 0, 1)
simple_mean_rolling_error <- oracle_rolling_error <- 0
for(sample_index in 2:(sample_size)){
simple_mean <- mean(trajectory[1:(sample_index-1)])
simple_mean_rolling_error <- simple_mean_rolling_error + (simple_mean - trajectory[sample_index])^2
oracle_rolling_error <- oracle_rolling_error +  (0 - trajectory[sample_index])^2
}
T_n <- simple_mean_rolling_error - oracle_rolling_error
A <- matrix(0, nrow = sample_size, ncol = sample_size)
for(sample_index in 1:(sample_size - 1)){
summation_vector <- (sample_index:(sample_size-1))^(-2)
A[sample_index, sample_index] <- sum(summation_vector)
}
for(i in 1:(sample_size - 1)){
for(j in (i+1):sample_size){
if(j <= sample_size-1){
summation_vector <- (j:(sample_size-1))^(-2)
}else{
summation_vector <- 0
}
A[i, j] <- sum(summation_vector) - 1/(j-1)
A[j, i] <- A[i, j]
}
}
Y <- matrix(trajectory, ncol = 1)
t(Y) %*% A  %*% Y
T_n
A
work_directory <- '/Users/tianyuzhang/Documents/AdaptiveSieveSGD/code_paper/review_code/'
all_result <- data.frame()
sample_size <- 100
trajectory <- rnorm(sample_size, 0, 1)
simple_mean_rolling_error <- oracle_rolling_error <- 0
for(sample_index in 2:(sample_size)){
simple_mean <- mean(trajectory[1:(sample_index-1)])
simple_mean_rolling_error <- simple_mean_rolling_error + (simple_mean - trajectory[sample_index])^2
oracle_rolling_error <- oracle_rolling_error +  (0 - trajectory[sample_index])^2
}
T_n <- simple_mean_rolling_error - oracle_rolling_error
A <- matrix(0, nrow = sample_size, ncol = sample_size)
for(sample_index in 1:(sample_size - 1)){
summation_vector <- (sample_index:(sample_size-1))^(-2)
A[sample_index, sample_index] <- sum(summation_vector)
}
for(i in 1:(sample_size - 1)){
for(j in (i+1):sample_size){
if(j <= sample_size-1){
summation_vector <- (j:(sample_size-1))^(-2)
}else{
summation_vector <- 0
}
A[i, j] <- sum(summation_vector) - 1/(j-1)
A[j, i] <- A[i, j]
}
}
Y <- matrix(trajectory, ncol = 1)
t(Y) %*% A  %*% Y
T_n
formula_result <- -sum(trajectory)^2 * (sample_size) / (sample_size - 1)^2 + (2*(sample_size - 1)^(-1) + (sample_size- 1)^(-2)) * sum(trajectory^2)
simple_mean_cv_error - oracle_cv_error
work_directory <- '/Users/tianyuzhang/Documents/AdaptiveSieveSGD/code_paper/review_code/'
all_result <- data.frame()
sample_size <- 100
trajectory <- rnorm(sample_size, 0, 1)
simple_mean_rolling_error <- oracle_rolling_error <- 0
for(sample_index in 2:(sample_size)){
simple_mean <- mean(trajectory[1:(sample_index-1)])
simple_mean_rolling_error <- simple_mean_rolling_error + (simple_mean - trajectory[sample_index])^2
oracle_rolling_error <- oracle_rolling_error +  (0 - trajectory[sample_index])^2
}
T_n <- simple_mean_rolling_error - oracle_rolling_error
A <- matrix(0, nrow = sample_size, ncol = sample_size)
for(sample_index in 1:(sample_size - 1)){
summation_vector <- (sample_index:(sample_size-1))^(-2)
A[sample_index, sample_index] <- sum(summation_vector)
}
for(i in 1:(sample_size - 1)){
for(j in (i+1):sample_size){
if(j <= sample_size-1){
summation_vector <- (j:(sample_size-1))^(-2)
}else{
summation_vector <- 0
}
A[i, j] <- sum(summation_vector) - 1/(j-1)
A[j, i] <- A[i, j]
}
}
Y <- matrix(trajectory, ncol = 1)
t(Y) %*% A  %*% Y
T_n
work_directory <- '/Users/tianyuzhang/Documents/AdaptiveSieveSGD/code_paper/review_code/'
all_result <- data.frame()
sample_size <- 100
trajectory <- rnorm(sample_size, 0, 1)
simple_mean_rolling_error <- oracle_rolling_error <- 0
for(sample_index in 2:(sample_size)){
simple_mean <- mean(trajectory[1:(sample_index-1)])
simple_mean_rolling_error <- simple_mean_rolling_error + (simple_mean - trajectory[sample_index])^2
oracle_rolling_error <- oracle_rolling_error +  (0 - trajectory[sample_index])^2
}
T_n <- simple_mean_rolling_error - oracle_rolling_error
A <- matrix(0, nrow = sample_size, ncol = sample_size)
for(sample_index in 1:(sample_size - 1)){
summation_vector <- (sample_index:(sample_size-1))^(-2)
A[sample_index, sample_index] <- sum(summation_vector)
}
for(i in 1:(sample_size - 1)){
for(j in (i+1):sample_size){
if(j <= sample_size-1){
summation_vector <- (j:(sample_size-1))^(-2)
}else{
summation_vector <- 0
}
A[i, j] <- sum(summation_vector) - 1/(j-1)
A[j, i] <- A[i, j]
}
}
Y <- matrix(trajectory, ncol = 1)
t(Y) %*% A  %*% Y
T_n
work_directory <- '/Users/tianyuzhang/Documents/AdaptiveSieveSGD/code_paper/review_code/'
all_result <- data.frame()
sample_size <- 100
trajectory <- rnorm(sample_size, 0, 1)
simple_mean_rolling_error <- oracle_rolling_error <- 0
for(sample_index in 2:(sample_size)){
simple_mean <- mean(trajectory[1:(sample_index-1)])
simple_mean_rolling_error <- simple_mean_rolling_error + (simple_mean - trajectory[sample_index])^2
oracle_rolling_error <- oracle_rolling_error +  (0 - trajectory[sample_index])^2
}
T_n <- simple_mean_rolling_error - oracle_rolling_error
A <- matrix(0, nrow = sample_size, ncol = sample_size)
for(sample_index in 1:(sample_size - 1)){
summation_vector <- (sample_index:(sample_size-1))^(-2)
A[sample_index, sample_index] <- sum(summation_vector)
}
for(i in 1:(sample_size - 1)){
for(j in (i+1):sample_size){
if(j <= sample_size-1){
summation_vector <- (j:(sample_size-1))^(-2)
}else{
summation_vector <- 0
}
A[i, j] <- sum(summation_vector) - 1/(j-1)
A[j, i] <- A[i, j]
}
}
Y <- matrix(trajectory, ncol = 1)
t(Y) %*% A  %*% Y
T_n
###quadratic form for LOO CV stat
A <- matrix(0, sample_size, sample_size)
###quadratic form for LOO CV stat
A <- matrix(0, sample_size, sample_size)
for(row_index in 1:sample_size){
for(col_index in 1:sample_size){
if(row_index == col_index){
A[row_index, col_index] <- 1/(sample_size - 1)
}else{
A[row_index, col_index] <- -sample_size/(sample_size - 1)^2
}
}
}
trajectory <- rnorm(sample_size, 1, 1)
formula_result <- -sum(trajectory)^2 * (sample_size) / (sample_size - 1)^2 + (2*(sample_size - 1)^(-1) + (sample_size- 1)^(-2)) * sum(trajectory^2)
formula_result
simple_mean_rolling_error <- oracle_rolling_error <- 0
simple_mean_cv_error <- oracle_cv_error <- 0
for(sample_index in 1:(sample_size - 1)){
simple_mean <- mean(trajectory[1:sample_index])
simple_mean_rolling_error <- simple_mean_rolling_error + (simple_mean - trajectory[sample_index + 1])^2
oracle_rolling_error <- oracle_rolling_error +  (1 - trajectory[sample_index + 1])^2
}
for(sample_index in 1:sample_size){
simple_mean <- mean(trajectory[-sample_index])
simple_mean_cv_error <- simple_mean_cv_error + (simple_mean - trajectory[sample_index])^2
oracle_cv_error <- oracle_cv_error +  (1 - trajectory[sample_index])^2
}
simple_mean_cv_error
formula_result <- -sum(trajectory)^2 * (sample_size) / (sample_size - 1)^2 + (2*(sample_size - 1)^(-1) + (sample_size- 1)^(-2)) * sum(trajectory^2)
formula_result
trajectory <- rnorm(sample_size, 1, 1)
simple_mean_rolling_error <- oracle_rolling_error <- 0
simple_mean_cv_error <- oracle_cv_error <- 0
for(sample_index in 1:sample_size){
simple_mean <- mean(trajectory[-sample_index])
simple_mean_cv_error <- simple_mean_cv_error + (simple_mean - trajectory[sample_index])^2
oracle_cv_error <- oracle_cv_error +  (1 - trajectory[sample_index])^2
}
simple_mean_cv_error
formula_result <- -sum(trajectory)^2 * (sample_size) / (sample_size - 1)^2 + (2*(sample_size - 1)^(-1) + (sample_size- 1)^(-2)) * sum(trajectory^2)
formula_result
trajectory
matrix(trajectory, nrow = 1) %*% A %*% matrix(trajectory, ncol = 1)
formula_result <- -sum(trajectory)^2 * (sample_size) / (sample_size - 1)^2 + (2*(sample_size - 1)^(-1) + (sample_size- 1)^(-2)) * sum(trajectory^2)
formula_result
formula_result <- -sum(trajectory)^2 * (sample_size) / (sample_size - 1)^2 + (2*(sample_size - 1)^(-1) + (sample_size- 1)^(-2)) * sum(trajectory^2)
formula_result
trajectory <- rnorm(sample_size, 1, 1)
simple_mean_rolling_error <- oracle_rolling_error <- 0
simple_mean_cv_error <- oracle_cv_error <- 0
for(sample_index in 1:(sample_size - 1)){
simple_mean <- mean(trajectory[1:sample_index])
simple_mean_rolling_error <- simple_mean_rolling_error + (simple_mean - trajectory[sample_index + 1])^2
oracle_rolling_error <- oracle_rolling_error +  (1 - trajectory[sample_index + 1])^2
}
for(sample_index in 1:sample_size){
simple_mean <- mean(trajectory[-sample_index])
simple_mean_cv_error <- simple_mean_cv_error + (simple_mean - trajectory[sample_index])^2
oracle_cv_error <- oracle_cv_error +  (1 - trajectory[sample_index])^2
}
simple_mean_cv_error
formula_result <- -sum(trajectory)^2 * (sample_size) / (sample_size - 1)^2 + (2*(sample_size - 1)^(-1) + (sample_size- 1)^(-2)) * sum(trajectory^2)
simple_mean_cv_error - oracle_cv_error
formula_result
simple_mean_cv_error
formula_result
simple_mean_cv_error
###quadratic form for LOO CV stat
A <- matrix(0, sample_size, sample_size)
for(row_index in 1:sample_size){
for(col_index in 1:sample_size){
if(row_index == col_index){
A[row_index, col_index] <- 1/(sample_size - 1)
}else{
A[row_index, col_index] <- -sample_size/(sample_size - 1)^2
}
}
}
matrix(trajectory, nrow = 1) %*% A %*% matrix(trajectory, ncol = 1)
simple_mean_cv_error - oracle_cv_error
trajectory <- rnorm(sample_size, 1, 1)
simple_mean_rolling_error <- oracle_rolling_error <- 0
simple_mean_cv_error <- oracle_cv_error <- 0
for(sample_index in 1:(sample_size - 1)){
simple_mean <- mean(trajectory[1:sample_index])
simple_mean_rolling_error <- simple_mean_rolling_error + (simple_mean - trajectory[sample_index + 1])^2
oracle_rolling_error <- oracle_rolling_error +  (1 - trajectory[sample_index + 1])^2
}
for(sample_index in 1:sample_size){
simple_mean <- mean(trajectory[-sample_index])
simple_mean_cv_error <- simple_mean_cv_error + (simple_mean - trajectory[sample_index])^2
oracle_cv_error <- oracle_cv_error +  (1 - trajectory[sample_index])^2
}
formula_result <- -sum(trajectory)^2 * (sample_size) / (sample_size - 1)^2 + (2*(sample_size - 1)^(-1) + (sample_size- 1)^(-2)) * sum(trajectory^2)
formula_result
simple_mean_cv_error - oracle_cv_error
simple_mean_cv_error
oracle_cv_error
###quadratic form for LOO CV stat
A <- matrix(0, sample_size, sample_size)
for(row_index in 1:sample_size){
for(col_index in 1:sample_size){
if(row_index == col_index){
A[row_index, col_index] <- 1/(sample_size - 1)
}else{
A[row_index, col_index] <- -sample_size/(sample_size - 1)^2
}
}
}
matrix(trajectory, nrow = 1) %*% A %*% matrix(trajectory, ncol = 1)
trajectory <- rnorm(sample_size, 0, 1)
simple_mean_rolling_error <- oracle_rolling_error <- 0
simple_mean_cv_error <- oracle_cv_error <- 0
for(sample_index in 1:(sample_size - 1)){
simple_mean <- mean(trajectory[1:sample_index])
simple_mean_rolling_error <- simple_mean_rolling_error + (simple_mean - trajectory[sample_index + 1])^2
oracle_rolling_error <- oracle_rolling_error +  (0 - trajectory[sample_index + 1])^2
}
for(sample_index in 1:sample_size){
simple_mean <- mean(trajectory[-sample_index])
simple_mean_cv_error <- simple_mean_cv_error + (simple_mean - trajectory[sample_index])^2
oracle_cv_error <- oracle_cv_error +  (0 - trajectory[sample_index])^2
}
formula_result <- -sum(trajectory)^2 * (sample_size) / (sample_size - 1)^2 + (2*(sample_size - 1)^(-1) + (sample_size- 1)^(-2)) * sum(trajectory^2)
simple_mean_cv_error - oracle_cv_error
formula_result
###quadratic form for LOO CV stat
A <- matrix(0, sample_size, sample_size)
for(row_index in 1:sample_size){
for(col_index in 1:sample_size){
if(row_index == col_index){
A[row_index, col_index] <- 1/(sample_size - 1)
}else{
A[row_index, col_index] <- -sample_size/(sample_size - 1)^2
}
}
}
matrix(trajectory, nrow = 1) %*% A %*% matrix(trajectory, ncol = 1)
###quadratic form for LOO CV stat
A <- matrix(0, sample_size, sample_size)
for(row_index in 1:sample_size){
for(col_index in 1:sample_size){
if(row_index == col_index){
A[row_index, col_index] <- 1/(sample_size - 1)
}else{
A[row_index, col_index] <- -sample_size/(sample_size - 1)^2
}
}
}
matrix(trajectory, nrow = 1) %*% A %*% matrix(trajectory, ncol = 1)
simple_mean_cv_error - oracle_cv_error
work_directory <- '/Users/tianyuzhang/Documents/AdaptiveSieveSGD/code_paper/review_code/'
all_result <- data.frame()
for(sample_size in c(10,100,1000)){
for(repeat_index in 1:100){
trajectory <- rnorm(sample_size, 0, 1)
simple_mean_rolling_error <- oracle_rolling_error <- 0
simple_mean_cv_error <- oracle_cv_error <- 0
for(sample_index in 1:(sample_size - 1)){
simple_mean <- mean(trajectory[1:sample_index])
simple_mean_rolling_error <- simple_mean_rolling_error + (simple_mean - trajectory[sample_index + 1])^2
oracle_rolling_error <- oracle_rolling_error +  (0 - trajectory[sample_index + 1])^2
}
for(sample_index in 1:sample_size){
simple_mean <- mean(trajectory[-sample_index])
simple_mean_cv_error <- simple_mean_cv_error + (simple_mean - trajectory[sample_index])^2
oracle_cv_error <- oracle_cv_error +  (0 - trajectory[sample_index])^2
}
# simple_mean_split <- mean(trajectory[1:floor(sample_size/2)])
# simple_mean_cv_error <- mean((trajectory[(floor(sample_size/2) + 1) : sample_size] - simple_mean_split)^2)
#
# oracle_cv_error <- mean((trajectory[(floor(sample_size/2) + 1) : sample_size] - 0)^2)
#
all_result <- rbind(all_result,
data.frame(repeat_index = repeat_index,
simple_mean_rolling_error = simple_mean_rolling_error,
oracle_rolling_error = oracle_rolling_error,
simple_mean_cv_error = simple_mean_cv_error,
oracle_cv_error = oracle_cv_error,
sample_size = sample_size))
}
}
all_result
all_result <- data.table::data.table(all_result)
all_result[, simple_minus_oracle_rv := simple_mean_rolling_error - oracle_rolling_error]
all_result[, correct_selection_rv := simple_minus_oracle_rv > 0]
all_result[, simple_minus_oracle_cv := simple_mean_cv_error - oracle_cv_error]
all_result[, correct_selection_cv := simple_minus_oracle_cv > 0]
avg_performance <- all_result[, .(avg_correct_proportion_rv = mean(correct_selection_rv),
avg_correct_proportion_cv = mean(correct_selection_cv)), by = sample_size]
formula_result <- -sum(trajectory)^2 * (sample_size) / (sample_size - 1)^2 + (2*(sample_size - 1)^(-1) + (sample_size- 1)^(-2)) * sum(trajectory^2)
simple_mean_cv_error - oracle_cv_error
hist(all_result[sample_size == 100, simple_minus_oracle_cv])
hist(all_result[sample_size == 1000, simple_minus_oracle_cv])
hist(all_result[sample_size == 10, simple_minus_oracle_cv])
hist(all_result[sample_size == 100, simple_minus_oracle_rv])
hist(all_result[sample_size == 1000, simple_minus_oracle_rv])
usethis::create_package("mypkg")
library(devtools)
library(roxygen2)
# setwd("/Users/tianyuzhang/Documents/")
# create("HMC")
setwd("/Users/tianyuzhang/Documents/HMC/HMC_package/")
document()
setwd("..")
build("HMC_package")
install("HMC_package")
library(devtools)
library(roxygen2)
# setwd("/Users/tianyuzhang/Documents/")
# create("HMC")
setwd("/Users/tianyuzhang/Documents/HMC/HMC_package/")
document()
setwd("..")
build("HMC_package")
install("HMC_package")
library(HMC)
?index_spliter
?check_data_for_folds
library(devtools)
library(roxygen2)
# setwd("/Users/tianyuzhang/Documents/")
# create("HMC")
setwd("/Users/tianyuzhang/Documents/HMC/HMC_package/")
document()
setwd("..")
build("HMC_package")
install("HMC_package")
library(devtools)
library(roxygen2)
# setwd("/Users/tianyuzhang/Documents/")
# create("HMC")
setwd("/Users/tianyuzhang/Documents/HMC/HMC_package/")
document()
library(devtools)
library(roxygen2)
# setwd("/Users/tianyuzhang/Documents/")
# create("HMC")
setwd("/Users/tianyuzhang/Documents/HMC/HMC_package/")
document()
rm(list = ls())
library(devtools)
library(roxygen2)
# setwd("/Users/tianyuzhang/Documents/")
# create("HMC")
setwd("/Users/tianyuzhang/Documents/HMC/HMC_package/")
document()
rm(list = ls())
library(devtools)
library(roxygen2)
# setwd("/Users/tianyuzhang/Documents/")
# create("HMC")
setwd("/Users/tianyuzhang/Documents/HMC/HMC_package/")
document()
rm(list = ls())
library(devtools)
library(roxygen2)
# setwd("/Users/tianyuzhang/Documents/")
# create("HMC")
setwd("/Users/tianyuzhang/Documents/HMC/HMC_package/")
document()

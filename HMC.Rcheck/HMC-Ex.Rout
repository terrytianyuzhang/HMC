
R version 4.4.2 (2024-10-31) -- "Pile of Leaves"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: aarch64-apple-darwin20

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "HMC"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "HMC-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('HMC')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("anchored_lasso_testing")
> ### * anchored_lasso_testing
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: anchored_lasso_testing
> ### Title: Anchored test for two-sample mean comparison.
> ### Aliases: anchored_lasso_testing
> 
> ### ** Examples
> 
> sample_size_1 <- sample_size_2 <- 300
> true_mean_1 <- matrix(c(rep(1, 10), rep(0, 90)), ncol = 1)
> true_mean_2 <- matrix(c(rep(1.5, 10), rep(0, 90)), ncol = 1)
> 
> sample_1 <- data.frame(MASS::mvrnorm(sample_size_1,
+                                mu = true_mean_1,
+                                Sigma = diag(1, 100)))
>  sample_2 <- data.frame(MASS::mvrnorm(sample_size_2,
+                                mu = true_mean_2,
+                                Sigma = diag(1, 100)))
>  result <- anchored_lasso_testing(sample_1, sample_2)
processiong fold 1
 Fold  1  out of  5 
 Fold  2  out of  5 
 Fold  3  out of  5 
 Fold  4  out of  5 
 Fold  5  out of  5 

1234567891011121314151617181920
Bingo!Found signal.
processiong fold 2
1234567891011121314151617181920
Bingo!Found signal.
processiong fold 3
123456789101112
Bingo!Found signal.
processiong fold 4
123
Bingo!Found signal.
processiong fold 5
12345678910111213141516
Bingo!Found signal.
>  result$test_statistics
         [,1]
[1,] 18.79961
>  ##the test statistic. It should follow normal(0,1) when there is no difference between the groups.
>  summarize_feature_name(result) 
 [1] "X1"  "X10" "X14" "X2"  "X27" "X3"  "X33" "X4"  "X41" "X42" "X44" "X48"
[13] "X5"  "X51" "X6"  "X7"  "X71" "X78" "X79" "X8"  "X9"  "X90" "X91" "X95"
>  #summarize which features contribute to discriminant vectors (i.e. logistic lasso)
>  extract_pc(result) # extract the estimated discriminant coefficients
[[1]]
  [1]  0.0000000000  0.0000000000  0.0000000000  0.0000000000  0.0000000000
  [6]  0.0000000000  0.0000000000  0.0000000000  0.0000000000  0.0000000000
 [11]  0.0000000000  0.0000000000  0.0000000000  0.0000000000  0.0000000000
 [16]  0.0000000000  0.0000000000  0.0000000000  0.0000000000  0.0000000000
 [21]  0.0000000000  0.0000000000  0.0000000000  0.0000000000  0.0000000000
 [26]  0.0000000000  0.0000000000  0.0000000000  0.0000000000  0.0000000000
 [31]  0.0000000000  0.0000000000  0.0000000000  0.0000000000  0.0000000000
 [36]  0.0000000000  0.0000000000  0.0000000000  0.0000000000  0.0000000000
 [41]  0.0000000000  0.0000000000  0.0000000000  0.0000000000  0.0000000000
 [46]  0.0000000000  0.0000000000  0.0000000000  0.0000000000  0.0000000000
 [51]  0.0000000000  0.0000000000  0.0000000000  0.0000000000  0.0000000000
 [56]  0.0000000000  0.0000000000 -0.0002896452  0.0000000000  0.0000000000
 [61]  0.0000000000  0.0000000000  0.0000000000  0.0000000000  0.0000000000
 [66]  0.0000000000  0.0000000000  0.0000000000  0.0089317997  0.0000000000
 [71]  0.0000000000  0.0000000000 -0.0520946180  0.0000000000  0.0000000000
 [76]  0.0000000000  0.0000000000  0.0000000000  0.9870175241  0.0000000000
 [81]  0.0000000000  0.0000000000  0.0000000000  0.0000000000  0.0000000000
 [86]  0.0000000000  0.0000000000  0.0000000000  0.0000000000  0.0000000000
 [91]  0.0000000000  0.0000000000  0.0000000000  0.0000000000  0.0000000000
 [96]  0.0000000000  0.0000000000  0.0000000000  0.1516664000  0.0000000000

[[2]]
  [1]  0.00000000  0.00000000  0.00000000  0.00000000  0.00000000  0.00000000
  [7]  0.00000000  0.00000000  0.00000000  0.00000000  0.00000000  0.00000000
 [13]  0.00000000  0.00000000  0.00000000  0.00000000  0.00000000  0.00000000
 [19]  0.00000000  0.00000000  0.00000000  0.00000000  0.00000000  0.00000000
 [25]  0.00000000  0.00000000  0.00000000  0.00000000  0.00000000  0.00000000
 [31]  0.00000000  0.00000000  0.00000000  0.00000000  0.00000000  0.00000000
 [37]  0.00000000  0.00000000  0.00000000  0.00000000  0.00000000  0.00000000
 [43] -0.07072883  0.00000000  0.00000000  0.00000000  0.00000000  0.00000000
 [49]  0.00000000  0.00000000  0.00000000  0.00000000  0.00000000  0.00000000
 [55]  0.00000000  0.00000000  0.00000000  0.00000000  0.00000000  0.00000000
 [61]  0.00000000  0.00000000  0.00000000  0.00000000  0.00000000  0.00000000
 [67]  0.00000000  0.00000000 -0.03554480  0.00000000  0.00000000  0.00000000
 [73]  0.00000000  0.00000000  0.10210742  0.00000000  0.00000000  0.00000000
 [79]  0.00000000  0.00000000  0.00000000  0.00000000  0.00000000  0.00000000
 [85]  0.00000000  0.00000000  0.00000000  0.00000000  0.00000000  0.00000000
 [91]  0.00000000  0.00000000  0.00000000  0.00000000 -0.99161892  0.00000000
 [97]  0.00000000  0.00000000  0.00000000  0.00000000

[[3]]
  [1]  0.0000000  0.0000000  0.0000000  0.0000000  0.0000000  0.0000000
  [7]  0.0000000  0.0000000  0.0000000  0.0000000  0.0000000  0.0000000
 [13]  0.0000000  0.0000000  0.0000000  0.0000000  0.0000000  0.0000000
 [19]  0.0000000  0.0000000  0.0000000  0.0000000  0.0000000  0.0000000
 [25]  0.0000000  0.0000000  0.0000000  0.0000000  0.0000000  0.0000000
 [31]  0.0000000  0.0000000  0.0000000  0.0000000  0.0000000  0.0000000
 [37]  0.0000000  0.0000000  0.0000000  0.0000000  0.0000000  0.0000000
 [43]  0.0000000  0.0000000  0.0000000  0.0000000  0.0000000  0.0000000
 [49]  0.0000000  0.0000000  0.0000000  0.0000000  0.0000000  0.0000000
 [55]  0.0000000  0.0000000  0.0000000  0.0000000  0.0000000  0.0000000
 [61]  0.0000000  0.0000000  0.0000000  0.0000000  0.0000000  0.0000000
 [67]  0.0000000  0.0000000  0.0000000  0.0000000  0.0000000  0.0000000
 [73]  0.0000000  0.0000000  0.0000000  0.0000000  0.0000000  0.0000000
 [79]  0.0000000  0.0000000  0.0000000  0.0000000  0.0000000  0.0000000
 [85]  0.0000000  0.0000000  0.0000000  0.0000000  0.0000000 -0.2258343
 [91]  0.0000000  0.0000000  0.0000000  0.0000000 -0.9741657  0.0000000
 [97]  0.0000000  0.0000000  0.0000000  0.0000000

[[4]]
  [1] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000
  [8] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000
 [15] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000
 [22] 0.0000000 0.0000000 0.0000000 0.0000000 0.9741657 0.0000000 0.0000000
 [29] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000
 [36] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000
 [43] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000
 [50] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000
 [57] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000
 [64] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000
 [71] 0.0000000 0.0000000 0.2258343 0.0000000 0.0000000 0.0000000 0.0000000
 [78] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000
 [85] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000
 [92] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000
 [99] 0.0000000 0.0000000

[[5]]
  [1]  0.0000000  0.0000000  0.0000000  0.0000000  0.0000000  0.0000000
  [7]  0.0000000  0.0000000  0.0000000  0.0000000  0.0000000  0.0000000
 [13]  0.0000000  0.0000000  0.0000000  0.0000000  0.0000000  0.0000000
 [19]  0.0000000  0.0000000  0.0000000  0.0000000  0.0000000  0.0000000
 [25]  0.0000000  0.0000000  0.0000000  0.0000000  0.0000000  0.0000000
 [31]  0.0000000  0.0000000  0.0000000  0.0000000  0.0000000  0.0000000
 [37]  0.0000000  0.0000000  0.0000000  0.0000000  0.0000000  0.0000000
 [43]  0.0000000  0.0000000  0.0000000  0.0000000  0.0000000  0.0000000
 [49]  0.0000000  0.0000000  0.0000000  0.0000000  0.0000000  0.0000000
 [55]  0.0000000  0.0000000  0.0000000  0.0000000  0.0000000  0.0000000
 [61]  0.0000000  0.0000000  0.0000000  0.0000000  0.0000000  0.0000000
 [67]  0.0000000  0.0000000  0.0000000  0.0000000  0.0000000  0.0000000
 [73]  0.0000000  0.0000000  0.0000000  0.0000000  0.0000000  0.0000000
 [79]  0.0000000  0.0000000  0.0000000  0.0000000  0.0000000  0.0000000
 [85]  0.0000000  0.0000000  0.0000000  0.0000000  0.0000000  0.0000000
 [91]  0.0000000  0.0000000  0.0000000  0.0000000  0.2258343  0.0000000
 [97]  0.0000000 -0.9741657  0.0000000  0.0000000

>  
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("anchored_lasso_testing", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("check_data_for_folds")
> ### * check_data_for_folds
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: check_data_for_folds
> ### Title: Check that data has enough rows for cross-validation folds
> ### Aliases: check_data_for_folds
> 
> ### ** Examples
> 
> check_data_for_folds(matrix(1:20, nrow = 5), n_folds = 5)
> ## Not run: 
> ##D check_data_for_folds(matrix(1:4, nrow = 2), n_folds = 5)  # This will throw an error
> ## End(Not run)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("check_data_for_folds", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("check_non_null_and_identical_colnames")
> ### * check_non_null_and_identical_colnames
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: check_non_null_and_identical_colnames
> ### Title: Check non-null and consistent column names across datasets
> ### Aliases: check_non_null_and_identical_colnames
> 
> ### ** Examples
> 
> d1 <- data.frame(a = 1:2, b = 3:4)
> d2 <- data.frame(a = 5:6, b = 7:8)
> check_non_null_and_identical_colnames(list(d1, d2))
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("check_non_null_and_identical_colnames", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("debiased_pc_testing")
> ### * debiased_pc_testing
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: debiased_pc_testing
> ### Title: Debiased one-step test for two-sample mean comparison. A small
> ###   p-value tells us not only there is difference in the mean vectors,
> ###   but can also indicates which principle component the difference
> ###   aligns with.
> ### Aliases: debiased_pc_testing
> 
> ### ** Examples
> 
> sample_size_1 <- sample_size_2 <- 300
> 
> true_mean_1 <- matrix(c(rep(1, 10), rep(0, 90)), ncol = 1)
> true_mean_2 <- matrix(c(rep(1.5, 10), rep(0, 90)), ncol = 1)
> pc1 <- c(rep(1, 10), rep(0, 90))
> pc1 <- pc1/norm(pc1, type = '2')
> 
> simulation_covariance <- 10 * pc1 %*% t(pc1)
> simulation_covariance <- simulation_covariance + diag(1, 100)
> 
> sample_1 <- data.frame(MASS::mvrnorm(sample_size_1,
+                                mu = true_mean_1,
+                                Sigma = simulation_covariance))
>  sample_2 <- data.frame(MASS::mvrnorm(sample_size_2,
+                                mu = true_mean_2,
+                                Sigma = simulation_covariance))
>  result <- debiased_pc_testing(sample_1, sample_2)
processiong fold 1
 Fold  1  out of  5 
 Fold  2  out of  5 
 Fold  3  out of  5 
 Fold  4  out of  5 
 Fold  5  out of  5 

123456789
processiong fold 2
12345678
processiong fold 3
12345678
processiong fold 4
12345678
processiong fold 5
123456789
>  result$test_statistics
[1] 5.549197
>  ##these are test statistics. Each one of them corresponds to one PC.
>  summarize_pc_name(result, latent_fator_index = 1) #shows which features contribute to PC1
 [1] "X1"  "X10" "X11" "X19" "X2"  "X23" "X28" "X3"  "X37" "X4"  "X43" "X44"
[13] "X45" "X5"  "X51" "X56" "X58" "X6"  "X62" "X68" "X7"  "X71" "X8"  "X83"
[25] "X9"  "X91" "X94"
>  extract_pc(result) # extract the estimated leading PCs.
[[1]]
               pc1
X1   -0.3278907215
X2   -0.3229599527
X3   -0.3196342648
X4   -0.3220634985
X5   -0.3236358802
X6   -0.3188090358
X7   -0.3193532552
X8   -0.3243846660
X9   -0.2977307463
X10  -0.2784845343
X11   0.0000000000
X12   0.0000000000
X13   0.0000000000
X14   0.0000000000
X15   0.0046740248
X16  -0.0006551677
X17   0.0000000000
X18   0.0000000000
X19  -0.0246932547
X20   0.0000000000
X21   0.0000000000
X22   0.0000000000
X23   0.0194375540
X24   0.0000000000
X25   0.0000000000
X26   0.0000000000
X27   0.0053581172
X28   0.0036371811
X29   0.0000000000
X30   0.0000000000
X31   0.0000000000
X32   0.0000000000
X33   0.0000000000
X34   0.0000000000
X35   0.0000000000
X36   0.0000000000
X37  -0.0086113834
X38   0.0000000000
X39   0.0000000000
X40   0.0000000000
X41   0.0000000000
X42   0.0000000000
X43   0.0000000000
X44   0.0000000000
X45   0.0000000000
X46   0.0000000000
X47   0.0000000000
X48  -0.0018046567
X49   0.0000000000
X50   0.0000000000
X51  -0.0165700251
X52   0.0000000000
X53   0.0000000000
X54   0.0000000000
X55   0.0000000000
X56   0.0001565962
X57   0.0000000000
X58  -0.0071857299
X59   0.0000000000
X60   0.0000000000
X61   0.0000000000
X62   0.0086956857
X63   0.0000000000
X64   0.0000000000
X65   0.0000000000
X66   0.0001834298
X67   0.0000000000
X68   0.0077904214
X69   0.0000000000
X70   0.0000000000
X71   0.0262572302
X72   0.0000000000
X73   0.0000000000
X74   0.0000000000
X75   0.0000000000
X76   0.0000000000
X77   0.0000000000
X78   0.0000000000
X79   0.0000000000
X80   0.0000000000
X81   0.0000000000
X82   0.0000000000
X83  -0.0129342808
X84   0.0000000000
X85   0.0000000000
X86   0.0000000000
X87   0.0000000000
X88   0.0000000000
X89   0.0000000000
X90   0.0000000000
X91   0.0000000000
X92   0.0000000000
X93   0.0000000000
X94  -0.0075198782
X95   0.0000000000
X96   0.0000000000
X97   0.0000000000
X98   0.0000000000
X99   0.0000000000
X100  0.0000000000

[[2]]
               pc1
X1   -0.3456777317
X2   -0.2936258621
X3   -0.3158015888
X4   -0.3169492770
X5   -0.3294184224
X6   -0.3207034143
X7   -0.3088388399
X8   -0.3082713763
X9   -0.3262141951
X10  -0.2896047192
X11   0.0033866989
X12   0.0000000000
X13  -0.0047682348
X14   0.0000000000
X15   0.0000000000
X16   0.0000000000
X17   0.0026193435
X18   0.0000000000
X19  -0.0074947947
X20   0.0000000000
X21   0.0000000000
X22   0.0000000000
X23   0.0038708033
X24  -0.0052835674
X25   0.0000000000
X26   0.0000000000
X27   0.0000000000
X28   0.0000000000
X29   0.0000000000
X30   0.0000000000
X31   0.0000000000
X32   0.0003615207
X33   0.0000000000
X34   0.0000000000
X35  -0.0073407336
X36   0.0000000000
X37   0.0000000000
X38   0.0000000000
X39   0.0000000000
X40   0.0000000000
X41   0.0000000000
X42   0.0000000000
X43   0.0157537945
X44   0.0000000000
X45   0.0203855152
X46   0.0000000000
X47  -0.0062704412
X48   0.0000000000
X49   0.0000000000
X50   0.0000000000
X51  -0.0107812818
X52   0.0000000000
X53   0.0000000000
X54   0.0046813035
X55   0.0000000000
X56   0.0000000000
X57   0.0000000000
X58  -0.0058929744
X59   0.0000000000
X60   0.0000000000
X61   0.0000000000
X62   0.0000000000
X63   0.0025709292
X64   0.0000000000
X65   0.0000000000
X66   0.0000000000
X67   0.0000000000
X68   0.0000000000
X69   0.0000000000
X70   0.0000000000
X71   0.0221601731
X72   0.0000000000
X73   0.0000000000
X74   0.0000000000
X75   0.0000000000
X76   0.0000000000
X77   0.0000000000
X78   0.0000000000
X79   0.0000000000
X80   0.0000000000
X81   0.0000000000
X82   0.0000000000
X83  -0.0006311262
X84   0.0000000000
X85   0.0000000000
X86   0.0000000000
X87   0.0000000000
X88   0.0000000000
X89   0.0000000000
X90   0.0000000000
X91  -0.0025398347
X92  -0.0070114937
X93  -0.0019738724
X94   0.0000000000
X95   0.0000000000
X96   0.0000000000
X97   0.0000000000
X98   0.0000000000
X99   0.0202271507
X100  0.0000000000

[[3]]
               pc1
X1   -0.3426243349
X2   -0.3259716079
X3   -0.3285799745
X4   -0.3243407421
X5   -0.3383693917
X6   -0.3090341125
X7   -0.2883560609
X8   -0.3048848129
X9   -0.2999788242
X10  -0.2919287937
X11   0.0000000000
X12   0.0000000000
X13   0.0000000000
X14   0.0098834650
X15   0.0000000000
X16   0.0000000000
X17   0.0000000000
X18   0.0000000000
X19  -0.0198373454
X20   0.0000000000
X21   0.0000000000
X22   0.0000000000
X23   0.0030488413
X24   0.0000000000
X25   0.0027357150
X26   0.0000000000
X27   0.0000000000
X28   0.0049003723
X29   0.0000000000
X30   0.0000000000
X31   0.0000000000
X32   0.0000000000
X33   0.0000000000
X34   0.0004419650
X35   0.0000000000
X36   0.0000000000
X37  -0.0021046404
X38   0.0000000000
X39   0.0000000000
X40   0.0000000000
X41   0.0000000000
X42   0.0000000000
X43   0.0013377149
X44   0.0016448142
X45   0.0000000000
X46  -0.0009915851
X47   0.0000000000
X48   0.0000000000
X49  -0.0047510497
X50   0.0000000000
X51  -0.0209018221
X52   0.0000000000
X53   0.0000000000
X54   0.0000000000
X55   0.0000000000
X56   0.0108618986
X57   0.0000000000
X58  -0.0171274535
X59   0.0000000000
X60  -0.0084300606
X61   0.0000000000
X62   0.0064404750
X63   0.0000000000
X64   0.0000000000
X65   0.0000000000
X66   0.0000000000
X67   0.0000000000
X68   0.0043993440
X69   0.0000000000
X70  -0.0077952475
X71   0.0112006178
X72   0.0000000000
X73   0.0000000000
X74   0.0000000000
X75   0.0010511787
X76   0.0000000000
X77   0.0000000000
X78   0.0000000000
X79   0.0000000000
X80   0.0000000000
X81   0.0000000000
X82   0.0000000000
X83   0.0000000000
X84   0.0000000000
X85   0.0000000000
X86   0.0000000000
X87   0.0000000000
X88   0.0000000000
X89   0.0000000000
X90   0.0000000000
X91   0.0000000000
X92  -0.0090564735
X93   0.0000000000
X94   0.0000000000
X95   0.0000000000
X96   0.0000000000
X97   0.0000000000
X98   0.0000000000
X99   0.0081003762
X100  0.0000000000

[[4]]
               pc1
X1   -0.3382596614
X2   -0.3183474990
X3   -0.3155756166
X4   -0.3258754398
X5   -0.3485475346
X6   -0.3137029031
X7   -0.3016669303
X8   -0.3110826055
X9   -0.2941371194
X10  -0.2863959838
X11   0.0011771262
X12   0.0001503292
X13   0.0000000000
X14   0.0000000000
X15   0.0000000000
X16   0.0000000000
X17   0.0000000000
X18   0.0000000000
X19   0.0000000000
X20   0.0000000000
X21   0.0000000000
X22   0.0000000000
X23   0.0048808340
X24   0.0000000000
X25   0.0000000000
X26   0.0000000000
X27   0.0000000000
X28   0.0083318673
X29   0.0000000000
X30   0.0000000000
X31   0.0000000000
X32   0.0000000000
X33   0.0000000000
X34   0.0000000000
X35   0.0000000000
X36   0.0000000000
X37  -0.0044180135
X38   0.0000000000
X39   0.0000000000
X40   0.0000000000
X41   0.0000000000
X42   0.0000000000
X43   0.0113910691
X44   0.0066505341
X45   0.0119612894
X46   0.0000000000
X47   0.0000000000
X48   0.0000000000
X49   0.0000000000
X50   0.0000000000
X51  -0.0059520014
X52   0.0000000000
X53   0.0000000000
X54   0.0000000000
X55  -0.0150955101
X56   0.0114686165
X57   0.0000000000
X58  -0.0271041959
X59   0.0000000000
X60   0.0000000000
X61   0.0000000000
X62   0.0003753438
X63   0.0000000000
X64   0.0000000000
X65   0.0000000000
X66   0.0000000000
X67   0.0000000000
X68   0.0000000000
X69   0.0000000000
X70   0.0000000000
X71   0.0151636785
X72   0.0000000000
X73   0.0000000000
X74   0.0000000000
X75   0.0000000000
X76   0.0000000000
X77   0.0000000000
X78   0.0000000000
X79   0.0000000000
X80   0.0000000000
X81   0.0000000000
X82   0.0000000000
X83   0.0000000000
X84   0.0000000000
X85   0.0000000000
X86   0.0000000000
X87   0.0000000000
X88   0.0000000000
X89   0.0049468546
X90   0.0000000000
X91  -0.0176141769
X92   0.0000000000
X93   0.0000000000
X94  -0.0108384094
X95   0.0000000000
X96   0.0000000000
X97   0.0000000000
X98   0.0000000000
X99   0.0000000000
X100  0.0000000000

[[5]]
               pc1
X1   -3.312170e-01
X2   -3.148596e-01
X3   -3.136754e-01
X4   -3.208995e-01
X5   -3.351375e-01
X6   -3.236420e-01
X7   -3.033083e-01
X8   -3.308197e-01
X9   -3.093738e-01
X10  -2.712670e-01
X11   1.194265e-03
X12   3.484736e-03
X13   0.000000e+00
X14   4.010265e-03
X15   0.000000e+00
X16  -2.309946e-03
X17   0.000000e+00
X18   0.000000e+00
X19  -2.944444e-03
X20   0.000000e+00
X21   0.000000e+00
X22   0.000000e+00
X23   2.491706e-03
X24  -1.758744e-02
X25   0.000000e+00
X26   0.000000e+00
X27   0.000000e+00
X28   1.918537e-02
X29  -5.758969e-03
X30   0.000000e+00
X31   0.000000e+00
X32   0.000000e+00
X33   3.138720e-03
X34   0.000000e+00
X35   0.000000e+00
X36   0.000000e+00
X37  -1.019704e-02
X38   1.902161e-04
X39   0.000000e+00
X40   0.000000e+00
X41   0.000000e+00
X42   0.000000e+00
X43   3.664236e-03
X44   5.490049e-03
X45   1.956422e-02
X46   0.000000e+00
X47   0.000000e+00
X48   0.000000e+00
X49   0.000000e+00
X50   0.000000e+00
X51  -2.406989e-03
X52   0.000000e+00
X53   0.000000e+00
X54   0.000000e+00
X55   0.000000e+00
X56   1.000551e-02
X57   0.000000e+00
X58  -6.121149e-03
X59   0.000000e+00
X60  -4.374106e-05
X61   0.000000e+00
X62   0.000000e+00
X63   1.065231e-03
X64   0.000000e+00
X65   0.000000e+00
X66   0.000000e+00
X67   0.000000e+00
X68   5.144217e-03
X69   0.000000e+00
X70   0.000000e+00
X71   2.208797e-02
X72   0.000000e+00
X73   0.000000e+00
X74   0.000000e+00
X75   0.000000e+00
X76   0.000000e+00
X77   0.000000e+00
X78   0.000000e+00
X79   0.000000e+00
X80   0.000000e+00
X81   0.000000e+00
X82   0.000000e+00
X83  -2.444379e-03
X84   0.000000e+00
X85   0.000000e+00
X86   0.000000e+00
X87   0.000000e+00
X88   0.000000e+00
X89   0.000000e+00
X90   0.000000e+00
X91  -1.285118e-03
X92   0.000000e+00
X93   0.000000e+00
X94  -5.095204e-03
X95   0.000000e+00
X96   0.000000e+00
X97   0.000000e+00
X98   0.000000e+00
X99   0.000000e+00
X100  0.000000e+00

>  
>  
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("debiased_pc_testing", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("estimate_leading_pc")
> ### * estimate_leading_pc
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: estimate_leading_pc
> ### Title: Estimate the leading principal component
> ### Aliases: estimate_leading_pc
> 
> ### ** Examples
> 
> ## Not run: 
> ##D X <- matrix(rnorm(100), nrow = 20)
> ##D estimate_leading_pc(X, pca_method = "dense_pca")
> ## End(Not run)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("estimate_leading_pc", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("fit_lasso")
> ### * fit_lasso
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: fit_lasso
> ### Title: Fit a (group) Lasso logistic regression classifier
> ### Aliases: fit_lasso
> 
> ### ** Examples
> 
> ## Not run: 
> ##D X1 <- matrix(rnorm(100), nrow = 10)
> ##D X2 <- matrix(rnorm(100), nrow = 10)
> ##D fit_lasso(X1, X2, classifier_method = "lasso")
> ## End(Not run)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("fit_lasso", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("index_spliter")
> ### * index_spliter
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: index_spliter
> ### Title: Split indices into folds
> ### Aliases: index_spliter
> 
> ### ** Examples
> 
> index_spliter(1:10, n_folds = 3)
[[1]]
[1] 9 4 7

[[2]]
[1] 1 2 5

[[3]]
[1]  3 10  6  8

> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("index_spliter", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("mean_comparison_anchor")
> ### * mean_comparison_anchor
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: mean_comparison_anchor
> ### Title: High-dimensional two-sample mean comparison with anchored
> ###   projection
> ### Aliases: mean_comparison_anchor
> 
> ### ** Examples
> 
> ## Not run: 
> ##D X <- matrix(rnorm(200 * 100), nrow = 100)
> ##D Y <- matrix(rnorm(200 * 100), nrow = 100)
> ##D result <- mean_comparison_anchor(X, Y, pca_method = "dense_pca", classifier_method = "lasso")
> ## End(Not run)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("mean_comparison_anchor", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("normalize_and_split")
> ### * normalize_and_split
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: normalize_and_split
> ### Title: Normalize and split two datasets using pooled mean and standard
> ###   deviation
> ### Aliases: normalize_and_split
> 
> ### ** Examples
> 
> set.seed(123)
> df1 <- matrix(rnorm(20), nrow = 5)
> df2 <- matrix(rnorm(20), nrow = 5)
> normalize_and_split(df1, df2)
$df1
            [,1]       [,2]        [,3]       [,4]
[1,] -0.38049344  1.5679389  1.42819561  1.6885688
[2,]  0.05184822  0.4725636 -0.11955599  0.3951031
[3,]  2.39339883 -1.0349075 -0.04620811 -2.0777824
[4,]  0.44542908 -0.5298995 -0.56570590  0.5993036
[5,]  0.52236792 -0.3192430 -1.75933264 -0.5788542

$df2
           [,1]       [,2]         [,3]       [,4]
[1,] -1.0445834 -1.4031615 -0.000196885  0.5865445
[2,]  0.0678207  0.8017231 -1.292340155  0.4513618
[3,] -0.9898444  0.2039550  0.839093148 -0.1665711
[4,] -0.6009399 -0.9240516  0.808663160 -0.4114556
[5,] -0.4650036  1.1650824  0.707387769 -0.4862185

> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("normalize_and_split", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("simple_pc_testing")
> ### * simple_pc_testing
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: simple_pc_testing
> ### Title: Simple plug-in test for two-sample mean comparison.
> ### Aliases: simple_pc_testing
> 
> ### ** Examples
> 
> sample_size_1 <- sample_size_2 <- 300
> true_mean_1 <- matrix(c(rep(1, 10), rep(0, 90)), ncol = 1)
> true_mean_2 <- matrix(c(rep(1.5, 10), rep(0, 90)), ncol = 1)
> pc1 <- c(rep(1, 10), rep(0, 90))
> pc1 <- pc1/norm(pc1, type = '2')
> 
> simulation_covariance <- 10 * pc1 %*% t(pc1)
> simulation_covariance <- simulation_covariance + diag(1, 100)
> 
> sample_1 <- data.frame(MASS::mvrnorm(sample_size_1,
+                                      mu = true_mean_1,
+                                      Sigma = simulation_covariance))
> sample_2 <- data.frame(MASS::mvrnorm(sample_size_2,
+                                      mu = true_mean_2,
+                                      Sigma = simulation_covariance))
> result <- simple_pc_testing(sample_1, sample_2)
processiong fold 1
 Fold  1  out of  5 
 Fold  2  out of  5 
 Fold  3  out of  5 
 Fold  4  out of  5 
 Fold  5  out of  5 

123456789
processiong fold 2
12345678
processiong fold 3
12345678
processiong fold 4
12345678
processiong fold 5
123456789
> result$test_statistics
[1] 5.504285
> ##these are test statistics. Each one of them corresponds to one PC.
> summarize_pc_name(result, latent_fator_index = 1) #shows which features contribute to PC1
 [1] "X1"  "X10" "X11" "X19" "X2"  "X23" "X28" "X3"  "X37" "X4"  "X43" "X44"
[13] "X45" "X5"  "X51" "X56" "X58" "X6"  "X62" "X68" "X7"  "X71" "X8"  "X83"
[25] "X9"  "X91" "X94"
> extract_pc(result) # extract the estimated leading PCs.
[[1]]
               pc1
X1   -0.3278907215
X2   -0.3229599527
X3   -0.3196342648
X4   -0.3220634985
X5   -0.3236358802
X6   -0.3188090358
X7   -0.3193532552
X8   -0.3243846660
X9   -0.2977307463
X10  -0.2784845343
X11   0.0000000000
X12   0.0000000000
X13   0.0000000000
X14   0.0000000000
X15   0.0046740248
X16  -0.0006551677
X17   0.0000000000
X18   0.0000000000
X19  -0.0246932547
X20   0.0000000000
X21   0.0000000000
X22   0.0000000000
X23   0.0194375540
X24   0.0000000000
X25   0.0000000000
X26   0.0000000000
X27   0.0053581172
X28   0.0036371811
X29   0.0000000000
X30   0.0000000000
X31   0.0000000000
X32   0.0000000000
X33   0.0000000000
X34   0.0000000000
X35   0.0000000000
X36   0.0000000000
X37  -0.0086113834
X38   0.0000000000
X39   0.0000000000
X40   0.0000000000
X41   0.0000000000
X42   0.0000000000
X43   0.0000000000
X44   0.0000000000
X45   0.0000000000
X46   0.0000000000
X47   0.0000000000
X48  -0.0018046567
X49   0.0000000000
X50   0.0000000000
X51  -0.0165700251
X52   0.0000000000
X53   0.0000000000
X54   0.0000000000
X55   0.0000000000
X56   0.0001565962
X57   0.0000000000
X58  -0.0071857299
X59   0.0000000000
X60   0.0000000000
X61   0.0000000000
X62   0.0086956857
X63   0.0000000000
X64   0.0000000000
X65   0.0000000000
X66   0.0001834298
X67   0.0000000000
X68   0.0077904214
X69   0.0000000000
X70   0.0000000000
X71   0.0262572302
X72   0.0000000000
X73   0.0000000000
X74   0.0000000000
X75   0.0000000000
X76   0.0000000000
X77   0.0000000000
X78   0.0000000000
X79   0.0000000000
X80   0.0000000000
X81   0.0000000000
X82   0.0000000000
X83  -0.0129342808
X84   0.0000000000
X85   0.0000000000
X86   0.0000000000
X87   0.0000000000
X88   0.0000000000
X89   0.0000000000
X90   0.0000000000
X91   0.0000000000
X92   0.0000000000
X93   0.0000000000
X94  -0.0075198782
X95   0.0000000000
X96   0.0000000000
X97   0.0000000000
X98   0.0000000000
X99   0.0000000000
X100  0.0000000000

[[2]]
               pc1
X1   -0.3456777317
X2   -0.2936258621
X3   -0.3158015888
X4   -0.3169492770
X5   -0.3294184224
X6   -0.3207034143
X7   -0.3088388399
X8   -0.3082713763
X9   -0.3262141951
X10  -0.2896047192
X11   0.0033866989
X12   0.0000000000
X13  -0.0047682348
X14   0.0000000000
X15   0.0000000000
X16   0.0000000000
X17   0.0026193435
X18   0.0000000000
X19  -0.0074947947
X20   0.0000000000
X21   0.0000000000
X22   0.0000000000
X23   0.0038708033
X24  -0.0052835674
X25   0.0000000000
X26   0.0000000000
X27   0.0000000000
X28   0.0000000000
X29   0.0000000000
X30   0.0000000000
X31   0.0000000000
X32   0.0003615207
X33   0.0000000000
X34   0.0000000000
X35  -0.0073407336
X36   0.0000000000
X37   0.0000000000
X38   0.0000000000
X39   0.0000000000
X40   0.0000000000
X41   0.0000000000
X42   0.0000000000
X43   0.0157537945
X44   0.0000000000
X45   0.0203855152
X46   0.0000000000
X47  -0.0062704412
X48   0.0000000000
X49   0.0000000000
X50   0.0000000000
X51  -0.0107812818
X52   0.0000000000
X53   0.0000000000
X54   0.0046813035
X55   0.0000000000
X56   0.0000000000
X57   0.0000000000
X58  -0.0058929744
X59   0.0000000000
X60   0.0000000000
X61   0.0000000000
X62   0.0000000000
X63   0.0025709292
X64   0.0000000000
X65   0.0000000000
X66   0.0000000000
X67   0.0000000000
X68   0.0000000000
X69   0.0000000000
X70   0.0000000000
X71   0.0221601731
X72   0.0000000000
X73   0.0000000000
X74   0.0000000000
X75   0.0000000000
X76   0.0000000000
X77   0.0000000000
X78   0.0000000000
X79   0.0000000000
X80   0.0000000000
X81   0.0000000000
X82   0.0000000000
X83  -0.0006311262
X84   0.0000000000
X85   0.0000000000
X86   0.0000000000
X87   0.0000000000
X88   0.0000000000
X89   0.0000000000
X90   0.0000000000
X91  -0.0025398347
X92  -0.0070114937
X93  -0.0019738724
X94   0.0000000000
X95   0.0000000000
X96   0.0000000000
X97   0.0000000000
X98   0.0000000000
X99   0.0202271507
X100  0.0000000000

[[3]]
               pc1
X1   -0.3426243349
X2   -0.3259716079
X3   -0.3285799745
X4   -0.3243407421
X5   -0.3383693917
X6   -0.3090341125
X7   -0.2883560609
X8   -0.3048848129
X9   -0.2999788242
X10  -0.2919287937
X11   0.0000000000
X12   0.0000000000
X13   0.0000000000
X14   0.0098834650
X15   0.0000000000
X16   0.0000000000
X17   0.0000000000
X18   0.0000000000
X19  -0.0198373454
X20   0.0000000000
X21   0.0000000000
X22   0.0000000000
X23   0.0030488413
X24   0.0000000000
X25   0.0027357150
X26   0.0000000000
X27   0.0000000000
X28   0.0049003723
X29   0.0000000000
X30   0.0000000000
X31   0.0000000000
X32   0.0000000000
X33   0.0000000000
X34   0.0004419650
X35   0.0000000000
X36   0.0000000000
X37  -0.0021046404
X38   0.0000000000
X39   0.0000000000
X40   0.0000000000
X41   0.0000000000
X42   0.0000000000
X43   0.0013377149
X44   0.0016448142
X45   0.0000000000
X46  -0.0009915851
X47   0.0000000000
X48   0.0000000000
X49  -0.0047510497
X50   0.0000000000
X51  -0.0209018221
X52   0.0000000000
X53   0.0000000000
X54   0.0000000000
X55   0.0000000000
X56   0.0108618986
X57   0.0000000000
X58  -0.0171274535
X59   0.0000000000
X60  -0.0084300606
X61   0.0000000000
X62   0.0064404750
X63   0.0000000000
X64   0.0000000000
X65   0.0000000000
X66   0.0000000000
X67   0.0000000000
X68   0.0043993440
X69   0.0000000000
X70  -0.0077952475
X71   0.0112006178
X72   0.0000000000
X73   0.0000000000
X74   0.0000000000
X75   0.0010511787
X76   0.0000000000
X77   0.0000000000
X78   0.0000000000
X79   0.0000000000
X80   0.0000000000
X81   0.0000000000
X82   0.0000000000
X83   0.0000000000
X84   0.0000000000
X85   0.0000000000
X86   0.0000000000
X87   0.0000000000
X88   0.0000000000
X89   0.0000000000
X90   0.0000000000
X91   0.0000000000
X92  -0.0090564735
X93   0.0000000000
X94   0.0000000000
X95   0.0000000000
X96   0.0000000000
X97   0.0000000000
X98   0.0000000000
X99   0.0081003762
X100  0.0000000000

[[4]]
               pc1
X1   -0.3382596614
X2   -0.3183474990
X3   -0.3155756166
X4   -0.3258754398
X5   -0.3485475346
X6   -0.3137029031
X7   -0.3016669303
X8   -0.3110826055
X9   -0.2941371194
X10  -0.2863959838
X11   0.0011771262
X12   0.0001503292
X13   0.0000000000
X14   0.0000000000
X15   0.0000000000
X16   0.0000000000
X17   0.0000000000
X18   0.0000000000
X19   0.0000000000
X20   0.0000000000
X21   0.0000000000
X22   0.0000000000
X23   0.0048808340
X24   0.0000000000
X25   0.0000000000
X26   0.0000000000
X27   0.0000000000
X28   0.0083318673
X29   0.0000000000
X30   0.0000000000
X31   0.0000000000
X32   0.0000000000
X33   0.0000000000
X34   0.0000000000
X35   0.0000000000
X36   0.0000000000
X37  -0.0044180135
X38   0.0000000000
X39   0.0000000000
X40   0.0000000000
X41   0.0000000000
X42   0.0000000000
X43   0.0113910691
X44   0.0066505341
X45   0.0119612894
X46   0.0000000000
X47   0.0000000000
X48   0.0000000000
X49   0.0000000000
X50   0.0000000000
X51  -0.0059520014
X52   0.0000000000
X53   0.0000000000
X54   0.0000000000
X55  -0.0150955101
X56   0.0114686165
X57   0.0000000000
X58  -0.0271041959
X59   0.0000000000
X60   0.0000000000
X61   0.0000000000
X62   0.0003753438
X63   0.0000000000
X64   0.0000000000
X65   0.0000000000
X66   0.0000000000
X67   0.0000000000
X68   0.0000000000
X69   0.0000000000
X70   0.0000000000
X71   0.0151636785
X72   0.0000000000
X73   0.0000000000
X74   0.0000000000
X75   0.0000000000
X76   0.0000000000
X77   0.0000000000
X78   0.0000000000
X79   0.0000000000
X80   0.0000000000
X81   0.0000000000
X82   0.0000000000
X83   0.0000000000
X84   0.0000000000
X85   0.0000000000
X86   0.0000000000
X87   0.0000000000
X88   0.0000000000
X89   0.0049468546
X90   0.0000000000
X91  -0.0176141769
X92   0.0000000000
X93   0.0000000000
X94  -0.0108384094
X95   0.0000000000
X96   0.0000000000
X97   0.0000000000
X98   0.0000000000
X99   0.0000000000
X100  0.0000000000

[[5]]
               pc1
X1   -3.312170e-01
X2   -3.148596e-01
X3   -3.136754e-01
X4   -3.208995e-01
X5   -3.351375e-01
X6   -3.236420e-01
X7   -3.033083e-01
X8   -3.308197e-01
X9   -3.093738e-01
X10  -2.712670e-01
X11   1.194265e-03
X12   3.484736e-03
X13   0.000000e+00
X14   4.010265e-03
X15   0.000000e+00
X16  -2.309946e-03
X17   0.000000e+00
X18   0.000000e+00
X19  -2.944444e-03
X20   0.000000e+00
X21   0.000000e+00
X22   0.000000e+00
X23   2.491706e-03
X24  -1.758744e-02
X25   0.000000e+00
X26   0.000000e+00
X27   0.000000e+00
X28   1.918537e-02
X29  -5.758969e-03
X30   0.000000e+00
X31   0.000000e+00
X32   0.000000e+00
X33   3.138720e-03
X34   0.000000e+00
X35   0.000000e+00
X36   0.000000e+00
X37  -1.019704e-02
X38   1.902161e-04
X39   0.000000e+00
X40   0.000000e+00
X41   0.000000e+00
X42   0.000000e+00
X43   3.664236e-03
X44   5.490049e-03
X45   1.956422e-02
X46   0.000000e+00
X47   0.000000e+00
X48   0.000000e+00
X49   0.000000e+00
X50   0.000000e+00
X51  -2.406989e-03
X52   0.000000e+00
X53   0.000000e+00
X54   0.000000e+00
X55   0.000000e+00
X56   1.000551e-02
X57   0.000000e+00
X58  -6.121149e-03
X59   0.000000e+00
X60  -4.374106e-05
X61   0.000000e+00
X62   0.000000e+00
X63   1.065231e-03
X64   0.000000e+00
X65   0.000000e+00
X66   0.000000e+00
X67   0.000000e+00
X68   5.144217e-03
X69   0.000000e+00
X70   0.000000e+00
X71   2.208797e-02
X72   0.000000e+00
X73   0.000000e+00
X74   0.000000e+00
X75   0.000000e+00
X76   0.000000e+00
X77   0.000000e+00
X78   0.000000e+00
X79   0.000000e+00
X80   0.000000e+00
X81   0.000000e+00
X82   0.000000e+00
X83  -2.444379e-03
X84   0.000000e+00
X85   0.000000e+00
X86   0.000000e+00
X87   0.000000e+00
X88   0.000000e+00
X89   0.000000e+00
X90   0.000000e+00
X91  -1.285118e-03
X92   0.000000e+00
X93   0.000000e+00
X94  -5.095204e-03
X95   0.000000e+00
X96   0.000000e+00
X97   0.000000e+00
X98   0.000000e+00
X99   0.000000e+00
X100  0.000000e+00

> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("simple_pc_testing", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("validate_and_convert_data")
> ### * validate_and_convert_data
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: validate_and_convert_data
> ### Title: Validate and convert input data
> ### Aliases: validate_and_convert_data
> 
> ### ** Examples
> 
> validate_and_convert_data(data.frame(x = 1:3, y = 4:6), "example_data")
     x y
[1,] 1 4
[2,] 2 5
[3,] 3 6
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("validate_and_convert_data", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  5.15 0.083 5.237 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
